<style lang="less">
@import './style/app.less';
.container {
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  // justify-content: space-between;
  box-sizing: border-box;
}
</style>

<script>
import wepy from 'wepy'


import 'wepy-async-function'
import regeneratorRuntime from './utils/runtime'
  import Auth from './utils/auth'
  import Config from './utils/config'
  import Tips from './utils/tip'

export default class extends wepy.app {

  config = {
    pages: [
      'pages/index',
      'pages/login',
      'pages/addNewSign',
       'pages/useCenter',
       'pages/createNewSign',
       'pages/chooseSignInfo',
       'pages/contactUs',
       'pages/conncetMiniProgram',

       'pages/postMoment',
       'pages/postCommet',
       'pages/postNotice',
       'pages/rankingList',
       'pages/more',
       'pages/writeSignInfo',
       'pages/signItemDetail',
       'pages/myRecords',
       'pages/commentDetail',
       'pages/wxCodeShare',
       'pages/shareImage',
       'pages/noticeList',
       'pages/helpCenter',
       'pages/noticeDetail',
       'pages/openNotice',
       'pages/editInfo',
       'pages/settings',
       'pages/memberGroup',
       'pages/myInfo',
       'pages/messageList'
       // 'pages/properties'

    ],
    window: {
      backgroundTextStyle: 'light',
      navigationBarBackgroundColor: '#fff',
       backgroundColor: '#f7f7f7',
       enablePullDownRefresh: false,
      navigationBarTitleText: 'WeChat',
      navigationBarTextStyle: 'black'
    },
     tabBar: {
      color: '#757982',
      selectedColor: '#f00',
      borderStyle: 'white',
      backgroundColor: '#ffffff',
      list: [
        {
          pagePath: 'pages/index',
          text: '我的签到',
           iconPath:'./images/custom – 4.png',
           selectedIconPath:'./images/custom – 1.png'
        },
        {
          pagePath: 'pages/createNewSign',
          text: '新建签到',
           iconPath:'./images/custom – 5.png',
           selectedIconPath:'./images/custom – 2.png'
        },
        {
            pagePath: 'pages/useCenter',
            text:"个人中心",
            iconPath:'./images/custom – 6.png',
            selectedIconPath:'./images/custom – 3.png'
        }
      ]
    },
    networkTimeout: {
      "request": 10000,
      "downloadFile": 10000
    }
  }
  globalData = {
    auth:{},
    scene:false,
    query:'',
    appid: 'wx9402286955bc5ba8',
    pixelRatio:'',
    setting:{},
    getAuthFn:false,
    originPage:Page
  }

  constructor () {
    super()
    this.use('requestfix')
    this.use('promisify')
    this.intercept('request',{
      config(p){
        return p
      },
      success(p){
        return p
      },
      fail(p){
        if(Tips.isLoading === true){
          Tips.loaded()
        }
        return p
      },
      complete(p){
        return p
      }
    })
  }
   onLaunch(option) {
    if(option.scene=='1044'||option.scene=='1007'||option.scene=='1008'){
     wepy.$instance.globalData.scene=true;
     wepy.$instance.globalData.query=JSON.parse(option.query.item);//分享的小组ID

     wepy.$instance.globalData.path=option.path;//分享的页面
    }
      // 记录原Page方法
      // 重写Page方法
      if(Object.keys(Auth.getConfig('userInfo')).length>0){
        Page = (page) => {
          Object.keys(page).forEach(function(key){
            if(key !== 'data'){
              let originMethod = page[key];
              page[key] = function () {
                let e = arguments[0];
              
                //给所有的点击事件增加订阅消息弹窗
                if(!!e && !!e.type &&  e.type === 'tap'&&e.currentTarget.dataset.method!="subscribe"){
                  const tmplIds = ['jJWub-kOO9Xccq_t1JwxHtKHsG7naTZ4dW2urSeXcfU','W3rNF7_EbeCZEHPgVBBNYnpqW0g7D_UM-BZaDzjjqaY',
                  'zcMH8i35Xo68CpmX8Mlj0oGdebOj7Ib8HIUOPqtyHxk'];
                  Auth.subscribeMessage(tmplIds,['1','3','7']);
                }
                return originMethod.call(this,...arguments)
              }
            }
          });
          return wepy.$instance.globalData.originPage(page);
        };
      }
 
      wepy.showShareMenu({
        withShareTicket: true
      });
      if( wepy.$instance.globalData.getAuthFn!=true){
        this.getUserInfo().then((res)=>{
          // if(wepy.$instance.globalData.scene==truewepy.$instance.globalData.query.id&&(wepy.$instance.globalData.setting.authSetting)['scope.userInfo']){
          //      wx.navigateTo({
          //         url:'/pages/signItemDetail?item='+JSON.stringify(wepy.$instance.globalData.query)
          //       })
          // }
          }).catch(error=>{
            
            throw error
          })
      }
  }

  getUserInfo =()=>{
    return new Promise(async (resove,reject)=>{
      wepy.$instance.globalData.setting = await wepy.getSetting();
      console.log('getsetting执行'+JSON.stringify(wepy.$instance.globalData.setting))
          let arr=Object.keys( wepy.$instance.globalData.setting.authSetting);
            if(wepy.$instance.globalData.getAuthFn){
              return
            }
             wepy.$instance.globalData.getAuthFn=true;
            if(arr.length>0){
              
              if ((wepy.$instance.globalData.setting.authSetting)['scope.userInfo']) {
                console.log('授权过----'+JSON.stringify( wepy.$instance.globalData.setting))
                  //授权过
                  const userInfo =await wepy.getUserInfo();
                  const openId = Auth.getConfig("openId");
                    wepy.$instance.globalData.auth=userInfo.userInfo;
                console.log('openId----'+openId)
                    
                    wepy.setStorageSync('userInfo', JSON.stringify(userInfo.userInfo));
                  if(!openId) {
                    const res =await  wepy.login();
                console.log('login----'+JSON.stringify(res))

                    if (res.code) {
                      const loginToken=await Config.getOpenId(res.code);//获取token，接下来获取用户微信微信,调用注册接口
                console.log('loginToken----'+JSON.stringify(loginToken))
                     
                     if (loginToken) {
                        Auth.setConfig("openId", loginToken.OpenID);
                        if(loginToken.userType=='-1'){
                           wx.redirectTo({
                            url:'/pages/login'
                          })
                          resove()
                        }
                      }
                    }
                  };
               
                  try{
                    const session = await wepy.checkSession();
                  }catch(error){
                    console.log('session过期=====》》》》》'+JSON.stringify(error))
                     let res = await wepy.login();
                      if (res.code) {
                        let loginToken=await Config.getOpenId(res.code);
                        if (loginToken) {
                          Auth.setConfig("openId", loginToken.OpenID);
                        }
                    }
                  }
                 
                  resove( wepy.$instance.globalData.setting)
              }else{
                 wx.redirectTo({
                  url:'/pages/login'
                })
                resove( wepy.$instance.globalData.setting)
              }
            }else{//未授权
             console.log('未授权');
             if(wepy.$instance.globalData.path=='pages/signItemDetail'){
                wx.redirectTo({
                  url:'/pages/login'
                })
             }
               
            }
    }).catch(async (error)=>{
      console.log(JSON.stringify(error))
      if(error.errMsg=='getSetting:fail 需要重新登录'){
         let res = await wepy.login();
            if (res.code) {
              let loginToken=await Config.getOpenId(res.code);
              if (loginToken) {
                Auth.setConfig("openId", loginToken.OpenID);
              }
          }

      }
    })
  }
}
</script>
