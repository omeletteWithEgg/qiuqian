<style lang="less">
@import "../style/app.less";

    .chartboard {
        background-color: #F7F7F7;
        height: 100%;
        padding-bottom: 120rpx;
        &.fixed {
            position:fixed;
            left:0;
            right:0;
            overflow-y:scroll;
        }
         .sub-text{
                text-align: center;
                padding:20rpx 0;
                font-size: 22rpx;
                color:#9F9F9F;
            }
        .msgarea {
            padding: 20rpx 10rpx;
            font-size:28rpx;
            .clearfix:after{content:".";display:block;height:0;clear:both;visibility:hidden}
            .clearfix{height:1%;}
           
            .msg {
                border: 1px solid #d8d8d8;
                font-size: 32rpx;
                display: inline-block;
                padding: 14rpx 20rpx;
                max-width: 450rpx;
                border-radius: 15rpx;
            }
            .icon {
                width: 70rpx;
                height: 70rpx;
            }
            &.fromme {
                .msg {
                    background-color: @btn-primary-color;
                    float: right;
                     color:#fff;
                    margin-right: 10rpx;
                }
                .icon {
                    float: right;
                    margin-right: 10rpx;
                }
            }
            &.other {
                .msg {
                    background-color: #fff;
                    float: left;
                    margin-left: 10rpx;
                }
                .icon {
                    float: left;
                    margin-left: 10rpx;
                }
            }
        }
    }
</style>

</style>
<template>
     <scroll-view scroll-y="true" class="chartboard{{focus ? ' fixed' : ''}}">
        <block wx:for="{{message}}" wx:key="index" wx:for-index="index" wx:for-item="item">
            <view class="sub-text">{{item.time}}</view>
            <view class="msgarea{{item.from === 'me' ? ' fromme' : ' other'}}">
                <image class="icon" src="{{item.icon}}"></image>
                <view class="msg">{{item.msg}}</view>
                <view class="clearfix"></view>
            </view>
        </block>
    </scroll-view>
</template>
<script>
 import wepy from 'wepy'

 export default class Chartboard  extends wepy.component {
    config = {
      navigationBarTitleText: '客服'
    }

    data={
        message: [
            {'to': 'mahuateng', 'from': 'me', 'type': 'text', 'msg': '小马哥，我穷', 'time': 1480338091374},
            {'to': 'me', 'from': 'mahuateng', 'type': 'text', 'msg': '300股，接着。', 'time': 1480338091375},
            {'to': 'dinglei', 'from': 'me', 'type': 'text', 'msg': '为什么你们家的猪那么贵。', 'time': 1480338091378},
            {'to': 'me', 'from': 'dinglei', 'type': 'text', 'msg': '因为他会飞。', 'time': 1480338091379},
            {'to': 'mayun', 'from': 'me', 'type': 'text', 'msg': '支付鸨，挺好。', 'time': 1480338091384},
            {'to': 'me', 'from': 'dinglei', 'type': 'text', 'msg': '因为他会飞。', 'time': 1480338091379},
            {'to': 'mayun', 'from': 'me', 'type': 'text', 'msg': '支付鸨，挺好。', 'time': 1480338091384},
            {'to': 'me', 'from': 'mayun', 'type': 'text', 'msg': '你懂的，嘿嘿。', 'time': 1480338091394},
        ],
        focus: false
    }
    
        fixPosition (focus) {
            this.focus = focus;
            this.$apply();
        }

        // async loadMessage (id) {
        //     let userinfo, message;
        //     try {
        //         userinfo = await api.getUserInfo();
        //     } catch (e) {
        //         console.log(e);
        //         userinfo = {
        //             nickName: 'Gcaufy',
        //             id: 'gcaufy',
        //             avatarUrl: wepy.env === 'web' ? './images/myheader.png' : '../images/myheader.png',
        //         };
        //     }
        //     this.current = userinfo;
        //     try {
        //         message = await api.getHistory(id);
        //     } catch (e) {
        //         message = null;
        //         console.error('getHistory fail');
        //         console.log(e);
        //     }
        //     if (message) {
        //         this.message = message;
        //         this.to = id;
        //         this.message.forEach((msg) => {
        //             if (msg.from === 'me') {
        //                 msg.name = userinfo.nickName;
        //                 msg.icon = userinfo.avatarUrl;
        //             }
        //         });
        //         this.$apply();
        //     }
        // }

        // async sendMessage (msg) {
        //     let id = this.to;
        //     let msgObj = await api.sendMsg(id, msg);

        //     msgObj.name = this.current.nickName;
        //     msgObj.icon = this.current.avatarUrl;
        //     this.message.push(msgObj);

        //     this.$apply();
        //     this.$invoke('../myinput', 'clear');

        //     let randomReply = await api.getRandomReply(id);
        //     this.replyMessage(randomReply);
        // }

        // async replyMessage (msg) {
        //     let id = this.to;
        //     let contact = global.getContact(id);
        //     let msgObj = await api.replyMsg(id, msg);
        //     msgObj.name = contact.name;
        //     msgObj.icon = contact.icon;

        //     this.message.push(msgObj);
        //     this.$apply();
        // }
 }
</script>
